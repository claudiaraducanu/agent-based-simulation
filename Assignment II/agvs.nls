to agv-setup
  set shape "lander"
  set color 8
  set label-color black  
  
  set battery-life 500
  set assigned-to-luggage nobody
  set currently-carrying false
  set mode "r"
  set reserved-charge-spot nobody
end
 
to agv-go
  dead-agv-set-battery-drained-on
  alive-agv-set-battery-drained-on
  move-dead-agv-to-charging-spot
  charge-agv
  move-forward
  go-to-pick-assigned-luggage
  carry-to-luggage-destination
  copy-global-parameters
  calculate-utility-c
  calculate-utility-p
  calculate-utility-r
  
  set label battery-life
end
 
to dead-agv-set-battery-drained-on
  if (battery-life < 1) and (battery-drained-on = 0) [
    set battery-drained-on tick
  ]
end
 
to alive-agv-set-battery-drained-on
  if battery-life > 0 [
    set battery-drained-on 0
  ]
end
 
to move-dead-agv-to-charging-spot
  if (battery-life < 1) and (any? charge-nodes with [available = true and reserved = false]) and (battery-drained-on > tick+30) [
    move-to one-of charge-nodes with [available = true and reserved = false]
    set battery-drained-on 0
    set mode "c"
  ]
end
 
to charge-agv
  if any? charge-nodes-here and battery-life < 476 [
     set battery-life (battery-life + 25)
  ]
end

to move-forward
  if (target-node not in nodes-here) and (battery-life > 0) and (mode not "c") [
    set-my-next-node
    if not any? agvs-on (patch-here of next-node) [
      face next-node
      move-to next-node
    ]
  ]
end

to set-my-next-node
  let list-of-nodes nw:turtles-on-weighted-path-to ([target-node] of myself) weight
  if is-list? list-of-nodes
     [let agv-next-node item 1 list-of-nodes
        ask myself [ set next-node agv-next-node ]]
end

to go-to-pick-assigned-luggage
  if (assigned-to-luggage != nobody) and (not currently-carrying) [
    set target-node one-of nodes-on assigned-to-luggage
  ]
end

to carry-to-luggage-destination
  if member? assigned-to-luggage luggages-here [
    set currently-carrying true
    set target-node [destination] of assigned-to-luggage
  ]
end

to release-luggage
  if (member? target-node nodes-here) and currently-carrying [
    set assigned-to-luggage nobody
    set currently-carrying false
  ]
end

to copy-global-parameters
  set agv-KC1 global-KC1
  set agv-KC2 global-KC2
  set agv-KS global-KS
end

to calculate-utility-c
  if (mode="c") or (mode="r")[
    set utility-c (agv-KC1 * exp (-agv-KC2 * battery-life) )
  ]
end

to calculate-utility-p
  if (mode="c") or (mode="r")[
    set utility-p max [utility-offer] of luggages
  ]
end

to calculate-utility-r
  if (mode="c") or (mode="r")[
    ifelse (any? charge-nodes with [available = true and reserved = false])[
      set utility-r 0
    ][
      let set-of-not-charging-nor-delivering-agvs ( agvs with [mode not "c" and assigned-to-luggage != nobody] )
      set utility-r ( (1 - agv-KS) * max( [utility-c] of set-of-not-charging-nor-delivering-agvs ) )
    ]
  ]
end

to select-a-luggage
  if (mode="c") or (mode="r")[
    if (utility-p >= utility-r) and (utility-p >= utility-c)[
      set mode "p"
      set assigned-to-luggage max-one-of luggages [utility-offer]
      ask assigned-to-luggage [ set utility-offer -1 ]
    ]
  ]
end

to select-to-charge
  if (mode="c") or (mode="r")[
    if (utility-c >= utility-r) and (utility-c >= utility-p)[
      set mode "c"
    ]
  ]
end

to claim-charge-spot
  if (mode="c") and (not any? charge-nodes-here) and (not is-charge-node? target-node) and (any? charge-nodes with [available = true and reserved = false]) [
    set target-node one-of charge-nodes with [available = true and reserved = false]
    set reserved-charge-spot target-node
    ask reserved-charge-spot [ set reserved true ]
  ]
end

to free-charge-spot
  if ((mode="p") or (mode="r")) and ( reserved-charge-spot != nobody ) [
    ask reserved-charge-spot [ set reserved false ]
    set reserved-charge-spot nobody
  ]
end

to select-to-roam
  if (mode="c") or (mode="r")[
    if (utility-r >= utility-p) and (utility-r >= utility-c)[
      set mode="r"
    ]
  ]
end

to to-roam
  if (mode="r")[
    if (xcor = 7) and (ycor = -5)[
      set target-node node-at patches with [ (xcor = 15) and (ycor = 10) ]
    ][
      set target-node node-at patches with [ (xcor = 7) and (ycor = -5) ]
    ]
  ]
end